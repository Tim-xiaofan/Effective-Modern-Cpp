Chapter 1. Deducing Types/Item 1-- Understand template type deduction/case1
Chapter 1. Deducing Types/Item 1-- Understand template type deduction/func_param
Chapter 1. Deducing Types/Item 1-- Understand template type deduction/case2
Chapter 1. Deducing Types/Item 1-- Understand template type deduction/array_param
Chapter 1. Deducing Types/Item 1-- Understand template type deduction/case3
Chapter 1. Deducing Types/Item 3--Understand decltype/universal
Chapter 1. Deducing Types/Item 3--Understand decltype/template_ret
Chapter 1. Deducing Types/Item 3--Understand decltype/var_decltype
Chapter 1. Deducing Types/Item 2--Understand auto type deduction/auto
Chapter 1. Deducing Types/Item 4--Know how to view deduced types/runtime
Chapter 2. auto/Item 5 Prefer auto to explicit type declarations/item5
Chapter 2. auto/Item 6 Use the explicitly typed initializer idiom when auto deduces undesired types/item6
Chapter 3. Moving to Modern C++/Item 7 Distinguish between () and {} when creating objects/item6
Chapter 3. Moving to Modern C++/Item 9 Prefer alias declarations to typedefs/item9
Chapter 3. Moving to Modern C++/Item 10 Prefer scoped enums to unscoped enums/item10
Chapter 3. Moving to Modern C++/Item 8 Prefer nullptr to 0 and NULL/item8
Chapter 3. Moving to Modern C++/Item 11 Prefer deleted functions to private undefined ones/item11
Chapter 3. Moving to Modern C++/Item 12 Declare overriding functions override/item12
Chapter 3. Moving to Modern C++/Item 13 Prefer const_iterators to iterators/item13
Chapter 3. Moving to Modern C++/Item 14 Declare functions noexcept if they wonâ€™t emit exceptions/item14
